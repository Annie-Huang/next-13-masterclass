Next.js 13 Masterclass (https://netninja.dev/p/next-13-masterclass)

https://github.com/iamshaunjp/nextjs-masterclass    << each lesson got its own folder
https://github.com/Annie-Huang/next-13-masterclass

https://nextjs.org/docs/getting-started/installation
https://nextjs.org/docs
https://nextjs.org/docs/getting-started/react-essentials#thinking-in-server-components    << Got a nice diagram of the page, 'thinking-in-server-components.avif', can open with browser
https://nextjs.org/docs/getting-started/react-essentials#when-to-use-server-and-client-components
https://nextjs.org/docs/pages/api-reference/components/image#props

----------------------------------------------------------------------

PS C:\react\next-13-masterclass> json-server --watch --port 4000 .\_data\db.json    << http://localhost:4000/tickets
PS C:\react\next-13-masterclass> npm run dev


This project use:
global.css, tailwind, javascript (not typescript)


PS C:\react> npx create-next-app@13.4.9         << We are only update to 13.4.16 now as 17/08/2023
Need to install the following packages:
  create-next-app@13.4.9
Ok to proceed? (y) y
√ What is your project named? ... next-13-masterclass
√ Would you like to use TypeScript? ... No
√ Would you like to use ESLint? ... Yes
√ Would you like to use Tailwind CSS? ... Yes
√ Would you like to use `src/` directory? ... No
√ Would you like to use App Router? (recommended) ... Yes
? Would you like to customize the default import alias? » No


Client component:
    Rendered on the server, Hydrated in the browser.
Server component:
    Rendered on the server, No hydrated needed.
    Meaning it reduce the overall amount of JavaScript sent to the browser. Also we can fetch data from a DB directly inside server component
    and access all the backend-resource from them as well. Was safe to use private API keys or tokens within server component.
    However, because they don't get hydrated in the browser it means they are not interactive.
    You can use client components for the small areas of a page that do need to be interactive.

Link / Routes:
    When nextjs see a link component on the page, it prefetches the page from the link in the background so by the time we click the link it already has the content


Tailwind:
    Can use @apply in the css file to apply Tailwind class:
    main > h2 {
      @apply mb-4 pb-2 text-base;
    }

Image:
    https://nextjs.org/docs/pages/api-reference/components/image#props
    <Image src={Logo} alt='Dojo Helpdesk logo' width={70} quality={100} placeholder='blur' />
    placeholder='blur' will blur the image while it's loading.




















