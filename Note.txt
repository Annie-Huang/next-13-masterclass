Next.js 13 Masterclass (https://netninja.dev/p/next-13-masterclass)
Next 13 Crash Course (https://www.youtube.com/playlist?list=PL4cUxeGkcC9jZIVqmy_QhfQdi6mzQvJnT) << First part of the paid online course

https://github.com/iamshaunjp/nextjs-masterclass    << each lesson got its own folder
https://github.com/Annie-Huang/next-13-masterclass

https://nextjs.org/docs/getting-started/installation
https://nextjs.org/docs
https://nextjs.org/docs/getting-started/react-essentials#thinking-in-server-components    << Got a nice diagram of the page, 'thinking-in-server-components.avif', can open with browser
https://nextjs.org/docs/getting-started/react-essentials#when-to-use-server-and-client-components
https://nextjs.org/docs/pages/api-reference/components/image#props
https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming#instant-loading-states
https://nextjs.org/docs/app/building-your-application/routing/route-groups
https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#layouts
https://nextjs.org/docs/app/api-reference/functions/generate-metadata
https://nextjs.org/docs/app/api-reference/functions/next-response
https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#opting-out-of-data-caching

https://supabase.com/
https://supabase.com/docs/guides/auth/auth-helpers/nextjs

----------------------------------------------------------------------

PS C:\react\next-13-masterclass> npm run db         << json-server --watch --port 4000 .\_data\db.json    << http://localhost:4000/tickets
PS C:\react\next-13-masterclass> npm run dev

http://localhost:3000/          << ticket dashboard layout
http://localhost:3000/login     << login layout


Build app for production:
--------------------------------
PS C:\react\next-13-masterclass> npm run build

You will see this in the output:
Route (app)                                Size     First Load JS
┌ ○ /                                      183 B          84.3 kB
├ ○ /_not-found                            0 B                0 B
├ ○ /favicon.ico                           0 B                0 B
├ λ /tickets                               183 B          84.3 kB
├ ● /tickets/[id]                          402 B          78.7 kB
├   ├ /tickets/1
├   ├ /tickets/2
├   └ /tickets/3
└ ○ /tickets/create                        1.23 kB        79.6 kB
+ First Load JS shared by all              78.3 kB
  ├ chunks/596-2dbb4f62b8882861.js         26 kB
  ├ chunks/fd9d1056-4691c648476250ad.js    50.5 kB
  ├ chunks/main-app-e701fcfc6dcad762.js    219 B
  └ chunks/webpack-2d7715a9fdd8b400.js     1.67 kB

Route (pages)                              Size     First Load JS
─ ○ /404                                   182 B          75.7 kB
+ First Load JS shared by all              75.5 kB
  ├ chunks/framework-8883d1e9be70c3da.js   45.1 kB
  ├ chunks/main-9362f690b083e2f5.js        28.6 kB
  ├ chunks/pages/_app-52924524f99094ab.js  195 B
  └ chunks/webpack-2d7715a9fdd8b400.js     1.67 kB

λ  (Server)  server-side renders at runtime (uses getInitialProps or getServerSideProps)
○  (Static)  automatically rendered as static HTML (uses no initial props)
●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)


And then you can start up the prod build by:
PS C:\react\next-13-masterclass> npm start


Supabase info
-------------------------------
https://supabase.com/docs/guides/auth/auth-helpers/nextjs

project Name: Dojo Helpdesk
Database Password: HU@6amUgyLqX_QT
Created .env.local file but this file is not checked in.

PS C:\react\next-13-masterclass> npm install @supabase/auth-helpers-nextjs @supabase/supabase-js

Debug in Supabase info:
Something you are unable to register a new user when you run your app. that is because your project maybe 'paused' in supabase.
Login to supabase dashboard (https://supabase.com/dashboard/projects) and make sure the 'Dojo Helpdesk' card does not have a 'paused' badge in it.



This project use:
--------------------------------
global.css, tailwind, javascript (not typescript)



PS C:\react> npx create-next-app@13.4.9         << We are only update to 13.4.16 now as 17/08/2023
Need to install the following packages:
  create-next-app@13.4.9
Ok to proceed? (y) y
√ What is your project named? ... next-13-masterclass
√ Would you like to use TypeScript? ... No
√ Would you like to use ESLint? ... Yes
√ Would you like to use Tailwind CSS? ... Yes
√ Would you like to use `src/` directory? ... No
√ Would you like to use App Router? (recommended) ... Yes
? Would you like to customize the default import alias? » No


Client component:
--------------------------------
    Rendered on the server, Hydrated in the browser.
Server component:
--------------------------------
    Rendered on the server, No hydrated needed.
    Meaning it reduce the overall amount of JavaScript sent to the browser. Also we can fetch data from a DB directly inside server component
    and access all the backend-resource from them as well. Was safe to use private API keys or tokens within server component.
    However, because they don't get hydrated in the browser it means they are not interactive.
    You can use client components for the small areas of a page that do need to be interactive.


Link / Routes:
--------------------------------
    When nextjs see a link component on the page, it prefetches the page from the link in the background so by the time we click the link it already has the content


Tailwind:
--------------------------------
    Can use @apply in the css file to apply Tailwind class:
    main > h2 {
      @apply mb-4 pb-2 text-base;
    }

Image:
--------------------------------
    https://nextjs.org/docs/pages/api-reference/components/image#props
    <Image src={Logo} alt='Dojo Helpdesk logo' width={70} quality={100} placeholder='blur' />
    placeholder='blur' will blur the image while it's loading.



Refetch data on the server component every XX seconds or no caching on data:
------------------------------------------------------------------------------------------------
  const res = await fetch('http://localhost:4000/tickets', {
    next: {
      // revalidate: 30, // refetch every 30 seconds
      revalidate: 0, // use 0 to opt out of the using cache
    },
  });


generateStaticParams
--------------------------------
/*
We tell the nextjs in advance all the IDs so that when we build the application it knows all fo the pages and
routes that it needs to make and that way they can be statically rendered and served from CDN and the way we do it
is by using 'generateStaticParams'

When we build for production, this is going to make all the routes and pages for the tickets ahead of time.
But if you make 'revalidate: 0', you are making the generateStaticParams redundant as nothing will be cache
*/
export async function generateStaticParams() {
  // [{id: '1'}, {id: '2'}, ...]

  const res = await fetch('http://localhost:4000/tickets');

  const tickets = await res.json();

  return tickets.map((ticket) => ({ id: ticket.id }));
}

generateMetadata
--------------------------------
/*
https://nextjs.org/docs/app/api-reference/functions/generate-metadata

Dynamically generate Metadata for a page.
*/
export async function generateMetadata({ params }) {
  const id = params.id;

  const res = await fetch(`http://localhost:4000/tickets/${id}`);
  const ticket = await res.json();

  return {
    title: `Dojo Helpdesk | ${ticket.title}`,
  };
}


Route - ignore certain section in a path
-----------------------------------------------------
https://nextjs.org/docs/app/building-your-application/routing/route-groups

app
    (auth)              <--- Putting the '()' will tell next.js to ignore the path and go to the next level instead. e.g. we just use (auth) for grouping.
        login
            page.jsx    <--- So you can access this path through http://localhost:3000/login
        signup
            page.jsx    <--- So you can access this path through http://localhost:3000/signup



Layout - nesting layout
-----------------------------------------------------
https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#layouts

app/(dashboard)/layout.jsx's content is nested as children of the app/layout.jsx component

The top-most layout is called the Root Layout. This required layout is shared across all pages in an application. Root layouts must contain html and body tags.

Layouts in a route are nested by default. Each parent layout wraps child layouts below it using the React children prop.








